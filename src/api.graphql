query NodeStatus {
  nodeStatus {
    bootstrapEnded
    preloadEnded
  }
}

query TopmostBlocks(
  $limit: Int = 500
  $offset: Int = 50
  $miner: Address = null
) {
  nodeStatus {
    topmostBlocks(limit: $limit, offset: $offset, miner: $miner) {
      id
      hash
      index
      miner
    }
  }
}

subscription PreloadProgressSubscription {
  preloadProgress {
    currentPhase
    totalPhase
    extra {
      type
      currentCount
      totalCount
    }
  }
}

subscription NodeStatusSubscription {
  nodeStatus {
    bootstrapEnded
    preloadEnded
  }
}

subscription NodeException {
  nodeException {
    code
    message
  }
}

query GetNCGBalance($address: Address!) {
  goldBalance(address: $address)
}

query TransactionResult($txId: TxId!) {
  transaction {
    transactionResult(txId: $txId) {
      blockHash
      blockIndex
      txStatus
    }
  }
}

query NodeAppProtocolVersion {
  nodeStatus {
    appProtocolVersion {
      version
      signer
      signature
      extra
    }
  }
}

subscription DifferentAppProtocolVersionEncounter {
  differentAppProtocolVersionEncounter {
    peer
    peerVersion {
      version
      extra
    }
    localVersion {
      version
      extra
    }
  }
}

subscription Notification {
  notification {
    type
    message
  }
}

query ValidateSnapshot($raw: String!) {
  validation {
    metadata(raw: $raw)
  }
}

query CollectionSheet {
  stateQuery {
    monsterCollectionSheet {
      orderedList {
        level
        requiredGold
        rewards {
          itemId
          quantity
        }
      }
    }
  }
}

query GetAvatarAddress($address: Address!) {
  stateQuery {
    agent(address: $address) {
      avatarStates {
        address
        name
        updatedAt
      }
    }
  }
}

query CollectionSheetWithState($address: Address!) {
  stateQuery {
    monsterCollectionSheet {
      orderedList {
        level
        requiredGold
        rewards {
          itemId
          quantity
        }
      }
    }
    agent(address: $address) {
      gold
    }
    monsterCollectionState(agentAddress: $address) {
      level
    }
  }
}

query MinerAddress {
  minerAddress
}

query GetTip {
  nodeStatus {
    tip {
      index
    }
  }
}

query GetNextTxNonce($address: Address!) {
  transaction {
    nextTxNonce(address: $address)
  }
}

query StateQueryMonsterCollection($agentAddress: Address!) {
  stateQuery {
    agent(address: $agentAddress) {
      gold
    }

    monsterCollectionState(agentAddress: $agentAddress) {
      expiredBlockIndex
      level
      rewardLevel
      receivedBlockIndex
      startedBlockIndex
      claimableBlockIndex
    }
  }
}

mutation Collect($level: Int!) {
  action {
    monsterCollect(level: $level)
  }
}

mutation ClaimCollectionReward($address: Address!) {
  action {
    claimMonsterCollectionReward(avatarAddress: $address)
  }
}

mutation Transfer(
  $recipient: Address!
  $amount: String!
  $txNonce: Long!
  $memo: String!
) {
  transfer(
    recipient: $recipient
    amount: $amount
    txNonce: $txNonce
    memo: $memo
  )
}


query StagedTx($address: Address!) {
  nodeStatus {
    stagedTxIds(address: $address)
  }
}


mutation StageTx($encodedTx: String!) {
  stageTx(payload: $encodedTx)
}

mutation StageTxV2($encodedTx: String!) {
  stageTxV2(payload: $encodedTx)
}

query PreloadEnded {
  nodeStatus {
    preloadEnded
    tip {
      index
    }
    appProtocolVersion {
      version
      extra
      signer
      signature
    }
  }
  rpcInformation {
    totalCount
  }
}

subscription BalanceByAgent($address: Address!) {
  balanceByAgent(address: $address)
}

subscription Tip {
  tipChanged {
    index
  }
}

query CurrentStaking($address: Address!) {
  stateQuery {
    stakeState(address: $address) {
      deposit
      startedBlockIndex
      receivedBlockIndex
      cancellableBlockIndex
      claimableBlockIndex
    }
  }
}

query StakingSheet {
  stateQuery {
    stakeRewards {
      orderedList {
        level
        requiredGold
        rewards {
          itemId
          decimalRate
          type
          currencyTicker
        }
        bonusRewards {
          itemId
          count
        }
      }
    }
  }
}

query LegacyCollectionState($address: Address!) {
  stateQuery {
    monsterCollectionSheet {
      orderedList {
        level
        requiredGold
      }
    }
    monsterCollectionState(agentAddress: $address) {
      startedBlockIndex
      claimableBlockIndex
      level
    }
  }
}

query GenesisHash {
  nodeStatus {
    genesis {
      hash
    }
  }
}

mutation stageTransaction($payload: String!) {
  stageTransaction(payload: $payload)
}

query transferAsset(
  $publicKey: String!
  $sender: Address!
  $recipient: Address!
  $amount: String!
  $memo: String
) {
  actionTxQuery(publicKey: $publicKey) {
    transferAsset(
      sender: $sender
      recipient: $recipient
      amount: $amount
      currency: NCG
      memo: $memo
    )
  }
}

query Stake($publicKey: String!, $amount: BigInt) {
  actionTxQuery(publicKey: $publicKey) {
    stake(amount: $amount)
  }
}

query ClaimStakeReward($publicKey: String!, $avatarAddress: Address) {
  actionTxQuery(publicKey: $publicKey) {
    claimStakeReward(avatarAddress: $avatarAddress)
  }
}

query MigrateMonsterCollection($publicKey: String!, $avatarAddress: Address) {
  actionTxQuery(publicKey: $publicKey) {
    migrateMonsterCollection(avatarAddress: $avatarAddress)
  }
}

query CheckContracted($agentAddress: Address!){
  stateQuery{
    pledge(agentAddress: $agentAddress){
			approved
      patronAddress
    }
  }
}

query approvePledge($publicKey: String!){
	actionTxQuery(publicKey: $publicKey){
    approvePledge(patronAddress: "0xc64c7cBf29BF062acC26024D5b9D1648E8f8D2e1")
  }
}
