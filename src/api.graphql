mutation createPrivateKey($privateKey: ByteString, $passphrase: String!) {
  keyStore {
    createPrivateKey(privateKey: $privateKey, passphrase: $passphrase) {
      hex
      publicKey {
        address
      }
    }
  }
}

mutation revokePrivateKey($address: Address!) {
  keyStore {
    revokePrivateKey(address: $address) {
      address
    }
  }
}

query NodeStatus {
  nodeStatus {
    bootstrapEnded
    preloadEnded
  }
}

query TopmostBlocks($limit: Int = 500, $offset: Int = 50, $miner: Address = null) {
  nodeStatus {
    topmostBlocks(limit: $limit, offset: $offset, miner: $miner) {
      id
      hash
      index
      miner
    }
  }
}

subscription PreloadProgressSubscription {
  preloadProgress {
    currentPhase
    totalPhase
    extra {
      type
      currentCount
      totalCount
    }
  }
}

subscription NodeStatusSubscription {
  nodeStatus {
    bootstrapEnded
    preloadEnded
  }
}

subscription NodeException {
  nodeException {
    code
    message
  }
}

query DecryptedPrivateKey($address: Address!, $passphrase: String!) {
  keyStore {
    decryptedPrivateKey(address: $address, passphrase: $passphrase)
  }
}

query ProtectedPrivateKeys {
  keyStore {
    protectedPrivateKeys {
      address
    }
  }
}

query GetNCGBalance($address: Address!) {
  goldBalance(address: $address)
}

query TransactionResult($txId: TxId!) {
  transaction {
    transactionResult(txId: $txId) {
      blockHash
      blockIndex
      txStatus
    }
  }
}

query ConvertPrivateKeyToAddress($privateKey: ByteString!) {
  keyStore {
    privateKey(hex: $privateKey) {
      publicKey {
        address
      }
    }
  }
}

query ValidatePrivateKey($privateKey: ByteString!) {
  validation {
    privateKey(hex: $privateKey)
  }
}

subscription DifferentAppProtocolVersionEncounter {
  differentAppProtocolVersionEncounter {
    peer
    peerVersion {
      version
      extra
    }
    localVersion {
      version
      extra
    }
  }
}

query Activation {
  activationStatus {
    activated
  }
}

query ActivationAddress($address: Address!) {
  activationStatus {
    addressActivated(address: $address)
  }
}

mutation Activate($encodedActivationKey: String!) {
  activationStatus {
    activateAccount(encodedActivationKey: $encodedActivationKey)
  }
}

subscription Notification {
  notification {
    type
    message
  }
}

query ValidateSnapshot($raw: String!) {
  validation {
    metadata(raw: $raw)
  }
}

query CollectionSheet {
  stateQuery {
    monsterCollectionSheet {
      orderedList {
        level
        requiredGold
        rewards {
          itemId
          quantity
        }
      }
    }
  }
}

query GetAvatarAddress($address: Address!) {
  stateQuery {
    agent(address: $address) {
      avatarStates {
        address
        name
        updatedAt
      }
    }
  }
}

query CollectionSheetWithState($address: Address!) {
  stateQuery {
    monsterCollectionSheet {
      orderedList {
        level
        requiredGold
        rewards {
          itemId
          quantity
        }
      }
    }
    agent(address: $address) {
      gold
    }
    monsterCollectionState(agentAddress: $address) {
      level
    }
  }
}

query MinerAddress {
  minerAddress
}

query GetTip {
  nodeStatus {
    tip {
      index
    }
  }
}

query GetNextTxNonce($address: Address!) {
  transaction {
    nextTxNonce(address: $address)
  }
}

query StateQueryMonsterCollection($agentAddress: Address!) {
  stateQuery{

    agent(address: $agentAddress) {
      gold
    }

    monsterCollectionState(agentAddress: $agentAddress) {
      expiredBlockIndex
      level
      rewardLevel
      receivedBlockIndex
      startedBlockIndex
      claimableBlockIndex
    }
  }
}

mutation Collect($level: Int!) {
  action {
    monsterCollect(level: $level)
  }
}

mutation ClaimCollectionReward($address: Address!) {
  action {
    claimMonsterCollectionReward(avatarAddress: $address)
  }
}

mutation Transfer($recipient: Address! $amount: String! $txNonce: Long! $memo: String!) {
  transfer(recipient: $recipient, amount: $amount, txNonce: $txNonce, memo: $memo)
}

subscription CollectionState {
  monsterCollectionState {
    address
    expiredBlockIndex
    level
    rewardLevel
    receivedBlockIndex
    startedBlockIndex
    claimableBlockIndex
  }
}

query StagedTx($address: Address!) {
  nodeStatus {
    stagedTxIds(address: $address)
  }
}

subscription CurrentGold {
  monsterCollectionStatus {
    fungibleAssetValue {
      quantity
      currency
    }
  }
}

subscription CollectionStatus {
  monsterCollectionStatus {
    lockup
    fungibleAssetValue {
      quantity
      currency
    }
    rewardInfos {
      itemId
      quantity
    }
    tipIndex
  }
}

query CollectionStatusQuery($address: Address) {
  monsterCollectionStatus(address: $address) {
    lockup
    fungibleAssetValue {
      quantity
      currency
    }
    rewardInfos {
      itemId
      quantity
    }
    tipIndex
  }
}

query ActivationKeyNonce($encodedActivationKey: String!) {
  activationKeyNonce(invitationCode: $encodedActivationKey)
}

mutation StageTx($encodedTx: String!) {
  stageTx(payload: $encodedTx)
}

subscription CollectionStateByAgent($address: Address!) {
  monsterCollectionStateByAgent(address: $address) {
    address
    expiredBlockIndex
    level
    rewardLevel
    receivedBlockIndex
    startedBlockIndex
    claimableBlockIndex
  }
}

subscription CollectionStatusByAgent($address: Address!) {
  monsterCollectionStatusByAgent(address: $address) {
    lockup
    fungibleAssetValue {
      quantity
      currency
    }
    rewardInfos {
      itemId
      quantity
    }
    tipIndex
  }
}

mutation StageTxV2($encodedTx: String!) {
  stageTxV2(payload: $encodedTx)
}

query PreloadEnded {
  nodeStatus {
    preloadEnded
    appProtocolVersion {
      version
      extra
    }
  }
  rpcInformation {
    totalCount
  }
}

subscription BalanceByAgent($address: Address!) {
  balanceByAgent(address: $address)
}

subscription Tip {
  tipChanged {
    index
  }
}
