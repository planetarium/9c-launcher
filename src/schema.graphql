schema {
    query: StandaloneQuery
    mutation: StandaloneMutation
    subscription: StandaloneSubscription
}

type Action {
    raw(encode: String = "hex"): String!
    inspection: String!
}

type ActionMutation {
    createAvatar(avatarName: String!, avatarIndex: Int!, hairIndex: Int!, lensIndex: Int!, earIndex: Int!, tailIndex: Int!): TxId!
    hackAndSlash(avatarAddress: Address!, worldId: Int!, stageId: Int!, costumeIds: [Guid], equipmentIds: [Guid], consumableIds: [Guid]): TxId!
    combinationEquipment(avatarAddress: Address!, recipeId: Int!, slotIndex: Int!, subRecipeId: Int): TxId!
    itemEnhancement(avatarAddress: Address!, itemId: Guid!, materialId: Guid!, slotIndex: Int!): TxId!
    dailyReward(avatarAddress: Address!): TxId!
    combinationConsumable(avatarAddress: Address!, recipeId: Int!, slotIndex: Int!): TxId!
    monsterCollect(level: Int!): TxId!
    claimMonsterCollectionReward(avatarAddress: Address!): TxId!
}

type ActivationStatusMutation {
    activateAccount(encodedActivationKey: String!): Boolean!
}

type ActivationStatusQuery {
    activated: Boolean!
    addressActivated(address: Address!): Boolean!
}

scalar Address

type AgentStateType {
    address: Address!
    avatarStates: [AvatarStateType!]
    gold: String!
    monsterCollectionRound: Long!
    monsterCollectionLevel: Long!
    hasTradedItem: Boolean!
}

type AppProtocolVersionType {
    version: Int!
    signer: Address!
    signature: ByteString!
    extra: ByteString
}

type ArenaInfoType {
    avatarAddress: Address!
    arenaRecord: ArenaRecordType!
    active: Boolean!
    dailyChallengeCount: Int!
    score: Int!
}

type ArenaRecordType {
    win: Int
    lose: Int
    draw: Int
}

type AvatarStateType {
    address: Address!
    blockIndex: Int!
    characterId: Int!
    dailyRewardReceivedIndex: Long!
    agentAddress: Address!
    rankingMapAddress: Address!
    updatedAt: Long!
    name: String!
    exp: Int!
    level: Int!
    actionPoint: Int!
    ear: Int!
    hair: Int!
    lens: Int!
    tail: Int!
    inventory: InventoryType!
    combinationSlotAddresses: [Address!]!
    itemMap: CollectionMapType!
    eventMap: CollectionMapType!
    monsterMap: CollectionMapType!
    stageMap: CollectionMapType!
    questList: QuestListType!
    mailBox: MailBoxType!
    worldInformation: WorldInformationType!
}

scalar BigInt

type Block {
    hash: ID!
    index: Long!
    difficulty: Long!
    totalDifficulty: BigInt!
    nonce: ByteString!
    miner: Address!
    previousBlock: Block
    timestamp: DateTimeOffset!
    stateRootHash: ByteString
    transactions: [Transaction!]!
}

type BlockHeader {
    index: Int!
    id: ID!
    hash: String!
    miner: Address
}

type BlockQuery {
    blocks(desc: Boolean = false, offset: Int = 0, limit: Int, excludeEmptyTxs: Boolean = false, miner: Address): [Block!]!
    block(hash: ID, index: ID): Block
}

scalar ByteString

type CollectionMapType {
    count: Int!
    pairs: [[Int]!]!
}

type ConsumableType {
    grade: Int!
    id: Int!
    itemType: ItemType!
    itemSubType: ItemSubType!
    elementalType: ElementalType!
    itemId: Guid!
    mainStat: StatType!
}

type CostumeType {
    grade: Int!
    id: Int!
    itemType: ItemType!
    itemSubType: ItemSubType!
    elementalType: ElementalType!
    itemId: Guid!
    equipped: Boolean!
}

scalar DateTimeOffset

scalar Decimal

type DecimalStatType {
    type: StatType!
    value: Decimal!
}

type DifferentAppProtocolVersionEncounterType {
    peer: String!
    peerVersion: AppProtocolVersionType!
    localVersion: AppProtocolVersionType!
}

enum ElementalType {
    NORMAL
    FIRE
    WATER
    LAND
    WIND
}

type EquipmentType {
    grade: Int!
    id: Int!
    itemType: ItemType!
    itemSubType: ItemSubType!
    elementalType: ElementalType!
    setId: Int!
    stat: DecimalStatType!
    equipped: Boolean!
    itemId: Guid!
    level: Int!
    skills: [SkillType]
    buffSkills: [SkillType]
    statsMap: StatsMapType!
}

type ExplorerQuery {
    blockQuery: BlockQuery
    transactionQuery: TransactionQuery
    nodeState: NodeState!
}

type FungibleAssetValueType {
    currency: String!
    quantity: Decimal!
}

scalar Guid

type InventoryType {
    consumables: [ConsumableType!]!
    materials: [MaterialType!]!
    equipments: [EquipmentType!]!
    costumes: [CostumeType!]!
}

enum ItemSubType {
    FOOD
    FULL_COSTUME
    HAIR_COSTUME
    EAR_COSTUME
    EYE_COSTUME
    TAIL_COSTUME
    WEAPON
    ARMOR
    BELT
    NECKLACE
    RING
    EQUIPMENT_MATERIAL
    FOOD_MATERIAL
    MONSTER_PART
    NORMAL_MATERIAL
    HOURGLASS
    AP_STONE
    CHEST
    TITLE
}

enum ItemType {
    CONSUMABLE
    COSTUME
    EQUIPMENT
    MATERIAL
}

type ItemUsableType {
    grade: Int!
    id: Int!
    itemType: ItemType!
    itemSubType: ItemSubType!
    elementalType: ElementalType!
    itemId: Guid!
}

type KeyStoreMutation {
    createPrivateKey(passphrase: String!, privateKey: ByteString): PrivateKeyType!
    revokePrivateKey(address: Address!): ProtectedPrivateKeyType!
}

type KeyStoreType {
    protectedPrivateKeys: [ProtectedPrivateKeyType!]!
    decryptedPrivateKey(address: Address!, passphrase: String!): ByteString!
    privateKey(hex: ByteString!): PrivateKeyType!
}

scalar Long

type MailBoxType {
    count: Int!
    mails: [MailType!]!
}

type MailType {
    id: Guid!
    requiredBlockIndex: Long!
    blockIndex: Long!
}

type MaterialType {
    grade: Int!
    id: Int!
    itemType: ItemType!
    itemSubType: ItemSubType!
    elementalType: ElementalType!
    itemId: ByteString!
}

type MonsterCollectionRewardInfoType {
    itemId: Int!
    quantity: Int!
}

type MonsterCollectionRowType {
    level: Int!
    requiredGold: Int!
    rewards: [MonsterCollectionRewardInfoType]!
}

type MonsterCollectionSheetType {
    orderedList: [MonsterCollectionRowType]
}

type MonsterCollectionStateType {
    address: Address!
    level: Long!
    expiredBlockIndex: Long!
    startedBlockIndex: Long!
    receivedBlockIndex: Long!
    rewardLevel: Long!
    claimableBlockIndex: Long!
}

type MonsterCollectionStatusType {
    fungibleAssetValue: FungibleAssetValueType!
    rewardInfos: [MonsterCollectionRewardInfoType]
    lockup: Boolean!
}

type NodeExceptionType {
    code: Int!
    message: String!
}

type NodeState {
    preloaded: Boolean!
}

type NodeStatusType {
    bootstrapEnded: Boolean!
    preloadEnded: Boolean!
    tip: BlockHeader!
    topmostBlocks(limit: Int!, offset: Int = 0, miner: Address): [BlockHeader]!
    stagedTxIds(address: Address): [TxId]
    genesis: BlockHeader!
    isMining: Boolean!
}

enum NotificationEnum {
    REFILL
    HAS
    COMBINATION_EQUIPMENT
    COMBINATION_CONSUMABLE
    BUYER
    SELLER
}

type NotificationType {
    type: NotificationEnum!
    message: String
}

type PeerChainStateQuery {
    state: [String]!
}

type PreloadStateExtraType {
    type: String!
    currentCount: Long!
    totalCount: Long!
}

type PreloadStateType {
    currentPhase: Long!
    totalPhase: Long!
    extra: PreloadStateExtraType!
}

type PrivateKeyType {
    hex: ByteString!
    publicKey: PublicKeyType!
}

type ProtectedPrivateKeyType {
    address: Address!
}

type PublicKeyType {
    hex(compress: Boolean): ByteString!
    address: Address!
}

type QuestListType {
    completedQuestIds: [Int!]!
}

type RankingInfoType {
    exp: Long!
    level: Int!
    armorId: Int!
    updatedAt: Long!
    stageClearedBlockIndex: Long!
    agentAddress: Address!
    avatarAddress: Address!
    avatarName: String!
}

type RankingMapStateType {
    address: Address!
    capacity: Int!
    rankingInfos: [RankingInfoType!]!
}

type ShopItemType {
    sellerAgentAddress: Address!
    sellerAvatarAddress: Address!
    productId: Guid!
    price: String!
    itemUsable: ItemUsableType
    costume: CostumeType
}

type ShopStateType {
    address: Address!
    products(id: Int, itemSubType: ItemSubType, maximumPrice: Int): [ShopItemType]!
}

type SkillType {
    id: Int!
    elementalType: ElementalType!
    power: Int!
    chance: Int!
}

type StandaloneMutation {
    keyStore: KeyStoreMutation
    activationStatus: ActivationStatusMutation
    action: ActionMutation
    stageTx(payload: String!): Boolean!
    transfer(recipient: Address!, amount: String!, txNonce: Long!, currencyAddress: String! = "000000000000000000000000000000000000000A", memo: String): TxId
    transferGold(recipient: Address!, amount: String!): TxId
}

type StandaloneQuery {
    stateQuery(hash: ByteString): StateQuery!
    state(address: Address!, hash: ByteString): ByteString
    transferNCGHistories(blockHash: ByteString!, recipient: Address): [TransferNCGHistoryType!]!
    keyStore: KeyStoreType
    nodeStatus: NodeStatusType!
    chainQuery: ExplorerQuery!
    validation: ValidationQuery!
    activationStatus: ActivationStatusQuery!
    peerChainState: PeerChainStateQuery!
    goldBalance(address: Address!, hash: ByteString): String!
    nextTxNonce(address: Address!): Long!
    getTx(txId: TxId!): TransactionType_1
    minerAddress: Address
    monsterCollectionStatus: MonsterCollectionStatusType
    transaction: TransactionHeadlessQuery!
    activated(invitationCode: String!): Boolean!
}

type StandaloneSubscription {
    tipChanged: TipChanged
    preloadProgress: PreloadStateType
    nodeStatus: NodeStatusType
    differentAppProtocolVersionEncounter: DifferentAppProtocolVersionEncounterType!
    notification: NotificationType!
    nodeException: NodeExceptionType!
    monsterCollectionState: MonsterCollectionStateType!
    monsterCollectionStatus: MonsterCollectionStatusType!
}

enum StatType {
    NONE
    HP
    ATK
    DEF
    CRI
    HIT
    SPD
}

type StateQuery {
    avatar(avatarAddress: Address!): AvatarStateType
    rankingMap(index: Int!): RankingMapStateType
    shop: ShopStateType
    weeklyArena(index: Int!): WeeklyArenaStateType
    agent(address: Address!): AgentStateType
    monsterCollectionState(agentAddress: Address!): MonsterCollectionStateType
    monsterCollectionSheet: MonsterCollectionSheetType
}

type StatsMapType {
    hP: Int!
    aTK: Int!
    dEF: Int!
    cRI: Int!
    hIT: Int!
    sPD: Int!
}

type TipChanged {
    index: Long!
    hash: ByteString
}

type Transaction {
    id: ID!
    nonce: Long!
    signer: Address!
    publicKey: ByteString!
    updatedAddresses: [Address!]!
    signature: ByteString!
    timestamp: DateTimeOffset!
    actions: [Action!]!
    blockRef: [Block!]
}

type TransactionHeadlessQuery {
    nextTxNonce(address: Address!): Long!
    getTx(txId: TxId!): TransactionType_1
    createUnsignedTx(publicKey: String!, plainValue: String!): String!
    attachSignature(unsignedTransaction: String!, signature: String!): String!
    transactionResult(txId: TxId!): TxResultType!
}

type TransactionQuery {
    transactions(signer: Address, involvedAddress: Address, desc: Boolean = false, offset: Int = 0, limit: Int): [Transaction!]!
    stagedTransactions(signer: Address, involvedAddress: Address, desc: Boolean = false, offset: Int = 0, limit: Int): [Transaction!]!
    transaction(id: ID): Transaction
}

type TransactionType_1 {
    id: TxId!
    nonce: Long!
    publicKey: PublicKeyType!
    signature: ByteString!
    signer: Address!
    timestamp: String!
    updatedAddresses: [Address]!
    actions: [Action]!
}

type TransferNCGHistoryType {
    blockHash: ByteString!
    txId: ByteString!
    sender: Address!
    recipient: Address!
    amount: String!
    memo: String
}

scalar TxId

type TxResultType {
    txStatus: TxStatus!
    blockIndex: Long
    blockHash: String
}

enum TxStatus {
    INVALID
    STAGING
    SUCCESS
    FAILURE
}

type ValidationQuery {
    metadata(raw: String!): Boolean!
    privateKey(hex: ByteString!): Boolean!
    publicKey(hex: ByteString!): Boolean!
}

type WeeklyArenaStateType {
    address: Address!
    ended: Boolean!
    orderedArenaInfos: [ArenaInfoType]!
}

type WorldInformationType {
    isStageCleared(stageId: Int!): Boolean!
    isWorldUnlocked(worldId: Int!): Boolean!
    world(worldId: Int!): WorldType!
}

type WorldType {
    id: Int!
    name: String!
    isUnlocked: Boolean!
    isStageCleared: Boolean!
    unlockedBlockIndex: Long!
    stageClearedBlockIndex: Long!
    stageBegin: Int!
    stageEnd: Int!
    stageClearedId: Int!
}
