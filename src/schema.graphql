schema {
  query: StandaloneQuery
  mutation: StandaloneMutation
  subscription: StandaloneSubscription
}

scalar Date

scalar DateTime

scalar DateTimeOffset

scalar Seconds

scalar Milliseconds

scalar Decimal

scalar Uri

scalar Guid

scalar Short

scalar UShort

scalar UInt

scalar Long

scalar BigInt

scalar ULong

scalar Byte

scalar SByte

type StandaloneQuery {
  activationStatus: ActivationStatusQuery!
  keyStore: KeyStoreType
  nodeStatus: NodeStatusType!
  state(address: Address!, hash: ByteString): ByteString
  validation: ValidationQuery!
}

scalar ByteString

scalar Address

type KeyStoreType {
  decryptedPrivateKey(address: Address!, passphrase: String!): ByteString!
  privateKey(hex: ByteString!): PrivateKeyType!
  protectedPrivateKeys: [ProtectedPrivateKeyType!]!
}

type ProtectedPrivateKeyType {
  address: Address!
}

type PrivateKeyType {
  hex: ByteString!
  publicKey: PublicKeyType!
}

type PublicKeyType {
  address: Address!
  hex(compress: Boolean): ByteString!
}

type NodeStatusType {
  bootstrapEnded: Boolean!
  preloadEnded: Boolean!
}

type ValidationQuery {
  privateKey(hex: ByteString!): Boolean!
  publicKey(hex: ByteString!): Boolean!
}

type ActivationStatusQuery {
  activated: Boolean!
}

type StandaloneMutation {
  activationStatus: ActivationStatusMutation
  keyStore: KeyStoreMutation
}

type KeyStoreMutation {
  createPrivateKey(passphrase: String!, privateKey: ByteString): PrivateKeyType!
  revokePrivateKey(address: Address!): ProtectedPrivateKeyType!
}

type ActivationStatusMutation {
  activateAccount(encodedActivationKey: String!): Boolean!
}

type StandaloneSubscription {
  differentAppProtocolVersionEncounter: DifferentAppProtocolVersionEncounterType!
  nodeStatus: NodeStatusType
  preloadProgress: PreloadStateType
  tipChanged: TipChanged
}

type TipChanged {
  hash: ByteString
  index: Long!
}

type PreloadStateType {
  currentPhase: Long!
  extra: PreloadStateExtraType!
  totalPhase: Long!
}

type PreloadStateExtraType {
  currentCount: Long!
  totalCount: Long!
  type: String!
}

type DifferentAppProtocolVersionEncounterType {
  localVersion: AppProtocolVersionType!
  peer: String!
  peerVersion: AppProtocolVersionType!
}

type AppProtocolVersionType {
  extra: ByteString
  signature: ByteString!
  signer: Address!
  version: Int!
}
